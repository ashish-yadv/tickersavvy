'use client'

import { getBalanceSheet, getCashFlow, getCompanyOverview, getDaily, getDailyAdjusted, getEarnings, getIncomeStatement, getTickerNewsAndSentiments } from '@/app/api/company/getData';
import { useEffect, useState } from 'react';
import HIGHLIGHTS from '@/app/ui/sections/HIGHLIGHTS';
import COMPANY_FINANCIALS from '@/app/ui/sections/COMPANY_FINANCIALS';

// Types import:
import { CompanyHighlights, IncomeReports, CashflowReports, BalanceSheetReports } from '@/app/lib/definitions';


// Dummy Data: Only for development
const companyOverviewDummyData = {
    "Symbol": "IBM",
    "AssetType": "Common Stock",
    "Name": "International Business Machines",
    "Description": "International Business Machines Corporation (IBM) is an American multinational technology company headquartered in Armonk, New York, with operations in over 170 countries. The company began in 1911, founded in Endicott, New York, as the Computing-Tabulating-Recording Company (CTR) and was renamed International Business Machines in 1924. IBM is incorporated in New York. IBM produces and sells computer hardware, middleware and software, and provides hosting and consulting services in areas ranging from mainframe computers to nanotechnology. IBM is also a major research organization, holding the record for most annual U.S. patents generated by a business (as of 2020) for 28 consecutive years. Inventions by IBM include the automated teller machine (ATM), the floppy disk, the hard disk drive, the magnetic stripe card, the relational database, the SQL programming language, the UPC barcode, and dynamic random-access memory (DRAM). The IBM mainframe, exemplified by the System/360, was the dominant computing platform during the 1960s and 1970s.",
    "CIK": "51143",
    "Exchange": "NYSE",
    "Currency": "USD",
    "Country": "USA",
    "Sector": "TECHNOLOGY",
    "Industry": "COMPUTER & OFFICE EQUIPMENT",
    "Address": "1 NEW ORCHARD ROAD, ARMONK, NY, US",
    "FiscalYearEnd": "December",
    "LatestQuarter": "2023-12-31",
    "MarketCapitalization": "166160040000",
    "EBITDA": "14291000000",
    "PERatio": "22.21",
    "PEGRatio": "4.2",
    "BookValue": "24.63",
    "DividendPerShare": "6.63",
    "DividendYield": "0.0366",
    "EPS": "8.16",
    "RevenuePerShareTTM": "67.89",
    "ProfitMargin": "0.121",
    "OperatingMarginTTM": "0.232",
    "ReturnOnAssetsTTM": "0.0471",
    "ReturnOnEquityTTM": "0.337",
    "RevenueTTM": "61860000000",
    "GrossProfitTTM": "32688000000",
    "DilutedEPSTTM": "8.16",
    "QuarterlyEarningsGrowthYOY": "0.2",
    "QuarterlyRevenueGrowthYOY": "0.041",
    "AnalystTargetPrice": "188.24",
    "AnalystRatingStrongBuy": "4",
    "AnalystRatingBuy": "4",
    "AnalystRatingHold": "10",
    "AnalystRatingSell": "3",
    "AnalystRatingStrongSell": "0",
    "TrailingPE": "22.21",
    "ForwardPE": "18.12",
    "PriceToSalesRatioTTM": "2.701",
    "PriceToBookRatio": "7.42",
    "EVToRevenue": "3.453",
    "EVToEBITDA": "14.54",
    "Beta": "0.714",
    "52WeekHigh": "199.18",
    "52WeekLow": "116.36",
    "50DayMovingAverage": "188.44",
    "200DayMovingAverage": "159.71",
    "SharesOutstanding": "916745000",
    "DividendDate": "2024-03-09",
    "ExDividendDate": "2024-02-08"
}

const highlightsDummyData: CompanyHighlights = {
    profitability: [
        {
            "text": "Market Capitalization",
            "value": companyOverviewDummyData.MarketCapitalization,
        },
        {
            "text": "Book Value",
            "value": companyOverviewDummyData.BookValue,
        },
        {
            "text": "Div. Per Share",
            "value": companyOverviewDummyData.DividendPerShare,
        },
        {
            "text": "Div. Yield",
            "value": companyOverviewDummyData.DividendYield,
            "isPercentage": true,
        },
        {
            "text": "EPS",
            "value": companyOverviewDummyData.EPS,
        },
        {
            "text": "PE Ratio",
            "value": companyOverviewDummyData.PERatio,
        },
        {
            "text": "PEG Ratio",
            "value": companyOverviewDummyData.PEGRatio,
        },
    ],
    incomeStatement: [
        {
            "text": "Profit Margin",
            "value": companyOverviewDummyData.ProfitMargin,
            "isPercentage": true,
        },
        {
            "text": "Operating Margin TTM",
            "value": companyOverviewDummyData.OperatingMarginTTM,
            "isPercentage": true,
        },
    ],
    management: [
        {
            "text": "ROA TTM",
            "value": companyOverviewDummyData.ReturnOnAssetsTTM,
            "isPercentage": true,
        },
        {
            "text": "ROE TTM",
            "value": companyOverviewDummyData.ReturnOnEquityTTM,
            "isPercentage": true,
        },
    ],
    valuation: [
        {
            "text": "Revenue TTM",
            "value": companyOverviewDummyData.RevenueTTM,
        },
        {
            "text": "Revenue Per Share TTM",
            "value": companyOverviewDummyData.RevenuePerShareTTM,
        },
        {
            "text": "Quarterly Revenue Growth YOY",
            "value": companyOverviewDummyData.QuarterlyRevenueGrowthYOY,
            "isPercentage": true,
        },
        {
            "text": "Gross Profit TTM",
            "value": companyOverviewDummyData.GrossProfitTTM,
        },
        {
            "text": "EBITDA",
            "value": companyOverviewDummyData.EBITDA,
        },
        {
            "text": "Diluted EPS TTM",
            "value": companyOverviewDummyData.DilutedEPSTTM,
        },
        {
            "text": "Quarterly Earnings Growth YOY",
            "value": companyOverviewDummyData.QuarterlyEarningsGrowthYOY,
        },
    ],
}

// Dummy Data: 
const companyFinancialsDummyData = {
    "income": {
        "annually": {
            labels: ["FY18", "FY19", "FY20", "FY21", "FY22", "FY23"],
            datasets: [
                {
                    label: "Revenue",
                    data: [3000, 3500, 4000, 8000, 7000, 9000],
                    backgroundColor: ["green"],
                    borderColor: "rgb(75, 192, 192)",
                },
                {
                    label: "Net Income",
                    data: [4000, 18000, 7000, 3000, 45000, 12000],
                    backgroundColor: ["cyan"],
                    borderColor: "rgb(75, 192, 192)",
                },
            ]
        },
        "quaterly": {
            labels: ["FY18", "FY19", "FY20", "FY21", "FY22", "FY23"],
            datasets: [
                {
                    label: "Income",
                    data: [3000, 3500, 4000, 8000, 7000, 9000],
                    backgroundColor: ["green"],
                    borderColor: "rgb(75, 192, 192)",
                },
                {
                    label: "Net Income",
                    data: [4000, 18000, 7000, 3000, 45000, 12000],
                    backgroundColor: ["cyan"],
                    borderColor: "rgb(75, 192, 192)",
                },
            ]
        },
    },
    "balanceSheet": {
        "annually": {
            labels: ["FY18", "FY19", "FY20", "FY21", "FY22", "FY23"],
            datasets: [
                {
                    label: "Balance Sheet",
                    data: [6000, 9000, 4500, 3000, 12000, 15000],
                    backgroundColor: ["purple"],
                    borderColor: "rgb(75, 192, 192)",
                },
            ]
        },
        "quaterly": {
            labels: ["FY18", "FY19", "FY20", "FY21", "FY22", "FY23"],
            datasets: [
                {
                    label: "Balance Sheet",
                    data: [6000, 9000, 4500, 3000, 12000, 15000],
                    backgroundColor: ["purple"],
                    borderColor: "rgb(75, 192, 192)",
                },
            ]
        }
    },
    "cashFlow": {
        "annually": {
            labels: ["FY18", "FY19", "FY20", "FY21", "FY22", "FY23"],
            datasets: [
                {
                    label: "Revenue",
                    data: [12000, 4500, 3000, 7000, 18000, 4000],
                    backgroundColor: ["cyan"],
                    borderColor: "rgb(75, 192, 192)",
                },
            ]
        },
        "quaterly": {
            labels: ["FY18", "FY19", "FY20", "FY21", "FY22", "FY23"],
            datasets: [
                {
                    label: "Revenue",
                    data: [12000, 4500, 3000, 7000, 18000, 4000],
                    backgroundColor: ["cyan"],
                    borderColor: "rgb(75, 192, 192)",
                },
            ]
        }
    },
}


// Method to Filter past 6 years annual reports: 
const filterAnnualReports = (data) => {
    // Get the current year
    const currentYear = new Date().getFullYear();

    // Filter "data" "annualReports" for the past 6 years
    return data?.annualReports?.filter(annualIncomeReport => {
        const annualIncomeReportYear = new Date(annualIncomeReport.fiscalDateEnding).getFullYear();
        return annualIncomeReportYear >= currentYear - 6 && annualIncomeReportYear <= currentYear;
    });
}

// Method to Filter past 6 quaters reports: 
function filterPastSixQuartersReports(data) {
    // Get today's date
    const today = new Date();

    // Set the threshold date to 21 months ago (6 quarters)
    const thresholdDate = new Date(today.getTime() - (21 * 30 * 24 * 60 * 60 * 1000));

    // Filter income reports based on report date
    return data?.quarterlyReports?.filter(report => {
        const reportDate = new Date(report["fiscalDateEnding"]);
        return reportDate >= thresholdDate;
    });
}


const Page = ({ params }: { params: { symbol: string } }) => {

    // Extract "symbol" from the URL
    const { symbol } = params;

    // Annual Reports(Variables):
    let pastSixYearsAnnualIncomeReports: IncomeReports = {
        labels: [],
        revenue: [],
        netIncome: [],
    }
    let pastSixYearsAnnualBalanceSheetReports: BalanceSheetReports = {
        labels: [],
        totalAssets: [],
        totalLiabilities: [],
    }
    let pastSixYearsAnnualCashflowReports: CashflowReports = {
        labels: [],
        operatingCashflow: [],
        cashflowFromInvestment: [],
        cashflowFromFinancing: [],
    }

    // Quaterly Reports(Variables):
    let pastSixQuatersIncomeReports: IncomeReports = {
        labels: [],
        revenue: [],
        netIncome: [],
    }
    let pastSixQuatersBalanceSheetReports: BalanceSheetReports = {
        labels: [],
        totalAssets: [],
        totalLiabilities: [],
    }
    let pastSixQuatersCashflowReports: CashflowReports = {
        labels: [],
        operatingCashflow: [],
        cashflowFromInvestment: [],
        cashflowFromFinancing: [],
    }


    let companyHighlights: CompanyHighlights,
        filterPastSixYearsAnnualIncomeReports,
        filterPastSixQuatersIncomeReports,
        filterPastSixYearsAnnualBalanceSheets,
        filterPastSixQuatersBalanceSheets,
        filterPastSixYearsAnnualCashflow,
        filterPastSixQuatersCashflow;



    // API raw data fetch states manage👇🏼:
    // Manage state of "Company Overview"
    const [companyOverview, setCompanyOverview] = useState<any>();

    // Manage state of "Company Income Statement"
    const [companyIncomeStatement, setCompanyIncomeStatement] = useState<any>();

    // Manage state of "Company Balance Sheet"
    const [companyBalanceSheet, setCompanyBalanceSheet] = useState<any>();

    // Manage state of "Company Cash Flow"
    const [companyCashflow, setCompanyCashflow] = useState<any>();

    // Manage state of "Company Earnings"
    const [companyEarnings, setCompanyEarnings] = useState<any>();

    // Manage state of "Company Financial Markets News and Sentiments"
    const [companyNewsAndSentiments, setCompanyNewsAndSentiments] = useState<any>();

    // Manage state of "Daily Adjusted"
    const [companyDailyAdjusted, setCompanyDailyAdjusted] = useState<any>();

    // Manage state of "Daily"
    const [companyDaily, setCompanyDaily] = useState<any>();


    // Data fetching:
    useEffect(() => {
        const fetchData = async () => {
            try {
                // Fetch "Company Overview":
                const fetchCompanyOverviewData = await getCompanyOverview(symbol);
                setCompanyOverview(fetchCompanyOverviewData);


                // Fetch "Company Income Statement":
                const fetchCompanyIncomeStatement = await getIncomeStatement(symbol);
                setCompanyIncomeStatement(fetchCompanyIncomeStatement);


                // Fetch "Company Balance Sheet":
                const fetchCompanyBalanceSheet = await getBalanceSheet(symbol);
                setCompanyBalanceSheet(fetchCompanyBalanceSheet);


                // Fetch "Company Cash Flow":
                const fetchCompanyCashFlow = await getCashFlow(symbol);
                setCompanyCashflow(fetchCompanyCashFlow);
                console.log("Cash flow data fetched: ", companyCashflow);



                // Fetch "Company Earnings":
                /* const fetchCompanyEarnings = await getEarnings(symbol);
                setCompanyEarnings(fetchCompanyEarnings); */


                // Fetch "Company Financial Markets News and Sentiments":
                /* const fetchCompanyNewsAndSentiments = await getTickerNewsAndSentiments(symbol);
                setCompanyNewsAndSentiments(fetchCompanyNewsAndSentiments); */


                // Fetch "Company Daily Adjusted":
                /*const fetchCompanyDailyAdjusted = await getDailyAdjusted(symbol);
                setCompanyDailyAdjusted(fetchCompanyDailyAdjusted); */


                // Fetch "Company Daily":
                /* const fetchCompanyDaily = await getDaily(symbol);
                setCompanyDaily(fetchCompanyDaily); */


                // console.log("Data Inside useEffect: ", companyIncomeStatement);

            } catch (error: any) {
                console.log("Error: ", error.message);
            }
        }

        fetchData();
    }, []);
    console.log("Company Cash Flow: ", companyCashflow);

    // 👉🏼 Company highlights data:
    companyHighlights = {
        profitability: [
            {
                "text": "Market Capitalization",
                "value": companyOverview?.MarketCapitalization,
            },
            {
                "text": "Book Value",
                "value": companyOverview?.BookValue,
            },
            {
                "text": "Div. Per Share",
                "value": companyOverview?.DividendPerShare,
            },
            {
                "text": "Div. Yield",
                "value": companyOverview?.DividendYield,
                "isPercentage": true,
            },
            {
                "text": "EPS",
                "value": companyOverview?.EPS,
            },
            {
                "text": "PE Ratio",
                "value": companyOverview?.PERatio,
            },
            {
                "text": "PEG Ratio",
                "value": companyOverview?.PEGRatio,
            },
        ],
        incomeStatement: [
            {
                "text": "Profit Margin",
                "value": companyOverview?.ProfitMargin,
                "isPercentage": true,
            },
            {
                "text": "Operating Margin TTM",
                "value": companyOverview?.OperatingMarginTTM,
                "isPercentage": true,
            },
        ],
        management: [
            {
                "text": "ROA TTM",
                "value": companyOverview?.ReturnOnAssetsTTM,
                "isPercentage": true,
            },
            {
                "text": "ROE TTM",
                "value": companyOverview?.ReturnOnEquityTTM,
                "isPercentage": true,
            },
        ],
        valuation: [
            {
                "text": "Revenue TTM",
                "value": companyOverview?.RevenueTTM,
            },
            {
                "text": "Revenue Per Share TTM",
                "value": companyOverview?.RevenuePerShareTTM,
            },
            {
                "text": "Quarterly Revenue Growth YOY",
                "value": companyOverview?.QuarterlyRevenueGrowthYOY,
                "isPercentage": true,
            },
            {
                "text": "Gross Profit TTM",
                "value": companyOverview?.GrossProfitTTM,
            },
            {
                "text": "EBITDA",
                "value": companyOverview?.EBITDA,
            },
            {
                "text": "Diluted EPS TTM",
                "value": companyOverview?.DilutedEPSTTM,
            },
            {
                "text": "Quarterly Earnings Growth YOY",
                "value": companyOverview?.QuarterlyEarningsGrowthYOY,
            },
        ],
    }

    // ============================================================================================
    // 👉🏼 Company Financials data(Filtering only the required data from the "Fetched Raw" data):
    // ============================================================================================

    // Past 6 years annual income reports:
    filterPastSixYearsAnnualIncomeReports = filterAnnualReports(companyIncomeStatement || { annualReports: [], quaterlyReports: [] });

    // Past 6 quaters income reports:
    filterPastSixQuatersIncomeReports = filterPastSixQuartersReports(companyIncomeStatement || { annualReports: [], quaterlyReports: [] });

    // Extract required values for Annual Income Reports:
    filterPastSixYearsAnnualIncomeReports?.forEach((annualIncomeReport) => {
        const year: string = new Date(annualIncomeReport?.fiscalDateEnding).getFullYear().toString();

        pastSixYearsAnnualIncomeReports?.labels.push(year);

        pastSixYearsAnnualIncomeReports?.revenue.push(annualIncomeReport.totalRevenue);

        pastSixYearsAnnualIncomeReports?.netIncome.push(annualIncomeReport?.netIncome);
    })

    // Extract required values for Quaterly Income Reports:
    filterPastSixQuatersIncomeReports?.forEach((quaterlyIncomeReport) => {
        const year: string = new Date(quaterlyIncomeReport?.fiscalDateEnding).getFullYear().toString();

        pastSixQuatersIncomeReports?.labels.push(year);

        pastSixQuatersIncomeReports?.revenue.push(quaterlyIncomeReport?.totalRevenue);

        pastSixQuatersIncomeReports?.netIncome.push(quaterlyIncomeReport?.netIncome);
    })

    // -------------------------------------------------------------------------------------------

    // Past 6 years annual balance sheets:
    filterPastSixYearsAnnualBalanceSheets = filterAnnualReports(companyBalanceSheet || { annualReports: [], quaterlyReports: [] });

    // Past 6 quaters balance sheets:
    filterPastSixQuatersBalanceSheets = filterPastSixQuartersReports(companyBalanceSheet || { annualReports: [], quaterlyReports: [] });

    // Extract required values for Annual Balance Sheets:
    filterPastSixYearsAnnualBalanceSheets?.forEach((annualBalanceSheet) => {
        const year: string = new Date(annualBalanceSheet?.fiscalDateEnding).getFullYear().toString();

        pastSixYearsAnnualBalanceSheetReports?.labels.push(year);

        pastSixYearsAnnualBalanceSheetReports?.totalAssets.push(annualBalanceSheet?.totalAssets);

        pastSixYearsAnnualBalanceSheetReports?.totalLiabilities.push(annualBalanceSheet?.totalLiabilities);
    })

    // Extract required values for Quaterly Balance Sheets:
    filterPastSixQuatersBalanceSheets?.forEach((quaterlyBalanceSheet) => {
        const year: string = new Date(quaterlyBalanceSheet?.fiscalDateEnding).getFullYear().toString();

        pastSixQuatersBalanceSheetReports?.labels.push(year);

        pastSixQuatersBalanceSheetReports?.totalAssets.push(quaterlyBalanceSheet?.totalAssets);

        pastSixQuatersBalanceSheetReports?.totalLiabilities.push(quaterlyBalanceSheet?.totalLiabilities);
    })

    // -------------------------------------------------------------------------------------------

    // Past 6 years annual cash flow records:
    filterPastSixYearsAnnualCashflow = filterAnnualReports(companyCashflow || { annualReports: [], quaterlyReports: [] });

    // Past 6 quaters Cashflow reports:
    filterPastSixQuatersCashflow = filterPastSixQuartersReports(companyCashflow || { annualReports: [], quaterlyReports: [] });

    // Extract required values for Annual Cash Flow Records:
    filterPastSixYearsAnnualCashflow?.forEach((annualCashFlow) => {
        const year: string = new Date(annualCashFlow?.fiscalDateEnding).getFullYear().toString();

        pastSixYearsAnnualCashflowReports?.labels.push(year);

        pastSixYearsAnnualCashflowReports?.operatingCashflow.push(annualCashFlow?.operatingCashflow);

        pastSixYearsAnnualCashflowReports?.cashflowFromInvestment.push(annualCashFlow?.cashflowFromInvestment);

        pastSixYearsAnnualCashflowReports?.cashflowFromFinancing.push(annualCashFlow?.cashflowFromFinancing);
    })

    // Extract required values for Quaterly Cashflow reports:
    filterPastSixQuatersCashflow?.forEach((quaterlyCashflow) => {
        const year: string = new Date(quaterlyCashflow?.fiscalDateEnding).getFullYear().toString();

        pastSixQuatersCashflowReports?.labels.push(year);

        pastSixQuatersCashflowReports?.operatingCashflow.push(quaterlyCashflow?.operatingCashflow);

        pastSixQuatersCashflowReports?.cashflowFromInvestment.push(quaterlyCashflow?.cashflowFromInvestment);

        pastSixQuatersCashflowReports?.cashflowFromFinancing.push(quaterlyCashflow?.cashflowFromFinancing);
    })

    // -------------------------------------------------------------------------------------------



    return (
        <div className={`md:flex md:flex-col md:items-center`}>
            <h1 className={`text-2xl text-black-600 center`}>company/[symbol]</h1>

            <HIGHLIGHTS companyHighlights={companyHighlights} />

            <COMPANY_FINANCIALS pastSixYearsAnnualIncomeReports={pastSixYearsAnnualIncomeReports}
                pastSixQuatersIncomeReports={pastSixQuatersIncomeReports}

                pastSixYearsAnnualBalanceSheetReports={pastSixYearsAnnualBalanceSheetReports}
                pastSixQuatersBalanceSheetReports={pastSixQuatersBalanceSheetReports}

                pastSixYearsAnnualCashflowReports={pastSixYearsAnnualCashflowReports}
                pastSixQuatersCashflowReports={pastSixQuatersCashflowReports}
            />
        </div>
    )
}

export default Page;